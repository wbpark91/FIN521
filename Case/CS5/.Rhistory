library("zoo")
library("zoo")
aapl=read.zoo("aapl.csv",sep=",", header=TRUE,format="%Y-%m-%d")
plot(aapl, main="APPLE Closing Prices on NASDAQ",
ylab="Price (USD)", xlab="Date")
head(aapl)
tail(aapl)
aapl[which.max(aapl)]
ret_simple=diff(aapl)/lag(aapl,k=-1)*100
ret_cont=diff(log(aapl))*100
summary(coredata(ret_simple))
ret_simple[which.min(ret_simple)]
hist(ret_simple,breaks=100,main="Histogram of Simple Returns", xlab="%")
aapl_2013=window(aapl,start='2013-01-01',end='2013-12-31')
aapl_2013[which.max(aapl_2013)]
quantile(ret_simple, probs=0.01)
install.packages("forecast")
library("forecast")
hp=read.zoo("UKHP.csv",sep=",",
header=TRUE, format="%Y-%m", FUN=as.yearmon)
hp_ret=diff(hp)/lag(hp,k=-1)*100
mod=auto.arima(hp_ret,stationary=TRUE, seasonal=FALSE,
ic="aic")
mod
aapl=read.zoo("aapl.csv",sep=",", header=TRUE,format="%Y-%m-%d")
source('~/.active-rstudio-document')
minvariance=function(assets, mu=0.005){
return=log(tail(assets,-1)/head(assets,-1))
Q=rbind(cov(return),rep(1, ncol(assets)), colMeans(return))
Q=cbind(Q,rbind(t(tail(Q,2)),matrix(0,2,2)))
B=c(rep(0,ncol(assets)),1,mu)
solve(Q,b)
}
install.packages("Quandl")
library(Quandl)
IT=Quandl('DAROCZI/IT',
start_date='2014-04-01', end_date='2016-02-19')
str(IT)
assets=IT[,-1]
return=log(tail(assets,-1)/head(assets,-1))
View(IT)
View(assets)
View(IT)
View(assets)
View(return)
View(assets)
head(return)
Q=rbind(cov(return),rep(1,ncol(assets)),colMeans(return))
View(Q)
round(Q,5)
Q=cbind(Q,rbind(t(tail(Q,2)),matrix(0,2,2)))
round(Q,5)
b=c(rep(0,ncol(assets))1,mu)
b=c(rep(0,ncol(assets)),1,mu)
mu=0.005
b=c(rep(0,ncol(assets)),1,mu)
b
solve(Q,b)
minvariance(IT[,-1])
frontier=function(assets){
return=log(tail(assets,-1)/head(assets,-1))
Q=cov(return)
n=ncol(assets)
r=colMeans(return)
Q1=rbind(Q,rep(1,n),r)
Q1=cbind(Q1, rbind(t(tail(Q1,2)),matrix(0,2,2)))
rbase=seq(min(r),max(r), length=100)
s=sapply(rbase, function(x){
y=head(solve(Q1,c(rep(0,n),1,x)),n)
y%*%Q%*%y
})
plot(s,rbase,xlab='Return',ylab='Variance')
}
frontier(IT)
frontier(assets)
rbase
View(frontier)
View(assets)
frontier=function(assets){
return=log(tail(assets,-1)/head(assets,-1))
Q=cov(return)
n=ncol(assets)
r=colMeans(return)
Q1=rbind(Q,rep(1,n),r)
Q1=cbind(Q1, rbind(t(tail(Q1,2)),matrix(0,2,2)))
rbase=seq(min(r),max(r), length=100)
s=sapply(rbase, function(y){
y=head(solve(Q1,c(rep(0,n),1,x)),n)
y%*%Q%*%y
})
plot(s,rbase,xlab='Return',ylab='Variance')
}
frontier(assets)
frontier=function(assets){
return=log(tail(assets,-1)/head(assets,-1))
Q=cov(return)
n=ncol(assets)
r=colMeans(return)
Q1=rbind(Q,rep(1,n),r)
Q1=cbind(Q1, rbind(t(tail(Q1,2)),matrix(0,2,2)))
rbase=seq(min(r),max(r), length=100)
s=sapply(rbase, function(x){
y=head(solve(Q1,c(rep(0,n),1,x)),n)
y%*%Q%*%y
})
plot(s,rbase,xlab='Return',ylab='Variance')
}
frontier(assets)
library(Quandl)
IT=Quandl('DAROCZI/IT',
start_date='2014-04-01', end_date='2016-02-19')
install.packages("timeSeries")
library(timeSeries)
View(IT)
View(IT)
IT=timeSeries(IT[,2:6, IT[,1]])
IT
log(lag(IT)/IT)
IT_return=returns(IT)
IT_return
install.packages("PerformanceAnalytics")
library(PerformanceAnalytics)
chart.CumReturns(IT_return, legend.loc='topleft', main='')
IT=Quandl('DAROCZI/IT',
start_date='2014-04-01', end_date='2016-02-19')
IT=timeSeries(IT[,2:6], IT[,1]])
IT=timeSeries(IT[,2:6], IT[,1])
IT_return=returns(IT)
chart.CumReturns(IT_return, legend.loc='topleft', main='')
install.packages("fPortfolio")
library(fPortfolio)
library(fPortfolio)
install.packages("fPortfolio")
library(fPortfolio)
#--------------------------
# Install lars package
#--------------------------
install.packages("lars")
library(lars)
#-------------------------
#p=25 and general X matrix
#-------------------------
n = 1000
p = 25
X =  matrix(rnorm(p*n),ncol=p)
X = X*0.8 + X[,1]*0.2
beta <- sample(0:1,p,replace=TRUE,prob=c(9,1))
which(beta != 0)
y =X %*% beta + rnorm(n,sd=0.3)
obj=lars(X,y, normalize=FALSE, intercept=FALSE)
plot(obj)
obj
install.packages("fastclime")
library(fastclime)
n = 1000
p = 25
X =  matrix(rnorm(p*n),ncol=p)
X = X*0.8 + X[,1]*0.2
beta <- sample(0:1,p,replace=TRUE,prob=c(9,1))
which(beta != 0)
y =X %*% beta + rnorm(n,sd=0.3)
obj=dantzig(X, y)
obj$BETA0[,c(1:6)]
#-------------------------
#p=25 and general X matrix
#-------------------------
n = 1000
p = 25
X =  matrix(rnorm(p*n),ncol=p)
View(X)
View(X)
beta <- sample(0:1,p,replace=TRUE,prob=c(9,1))
View(y)
beta
beta
obj=lars(X,y, normalize=FALSE, intercept=FALSE)
plot(obj)
reset
yinch()
clear
cls
clear
#-------------------------
#p=25 and general X matrix
#-------------------------
n = 1000
p = 25
X =  matrix(rnorm(p*n),ncol=p)
X = X*0.8 + X[,1]*0.2
beta <- sample(0:1,p,replace=TRUE,prob=c(9,1))
which(beta != 0)
y =X %*% beta + rnorm(n,sd=0.3)
obj=lars(X,y, normalize=FALSE, intercept=FALSE)
plot(obj)
obj
obj
which(beta != 0)
x[2]
X[2]
X[5]
beta
X[2:]
summary(obj)
obj
plot(obj)
library(fastclime)
n = 1000
p = 25
X =  matrix(rnorm(p*n),ncol=p)
X = X*0.8 + X[,1]*0.2
beta <- sample(0:1,p,replace=TRUE,prob=c(9,1))
which(beta != 0)
y =X %*% beta + rnorm(n,sd=0.3)
obj=dantzig(X, y)
obj$BETA0[,c(1:6)]
obj
obj$BETA0[,c(1:6)]
p = 25
library(lars)
n = 1000
p = 25
x = rnorm(10)
X = matrix(rnorm(p*n), ncol = p)
X = X*0.8 + X[,1]*0.2
beta = sample(0:1, p, replace = TRUE, prob=c(9,1))
which(beta != 0)
y = X %*% beta + rnorm(n, sd = 0.3)
obj = lars(X, y, normalize = FALSE, intercept = FALSE)
plot(obj)
obj
obj
obj
summary(obj)
obj
predict(obj)
clearPushBack()
cls
pdb
library(fastclime)
n = 1000
X = martix(rnorm(p*n), ncol = p)
p = 25
X = martix(rnorm(p*n), ncol = p)
X = matrix(rnorm(p*n), ncol = p)
X = X*0.8 + X[,1]*0.2
X[,1]
X[1,]
beta = sample(0:1, p, replace = TRUE, prob=c(9,1))
beta
beta = sample(0:1, p, replace = TRUE, prob=c(9,1))
beta
which(beta != 0)
y = x %*% beta + rnorm(n, sd = 0.3)
y
obj = dantzig(X, y)
obj$BETA0
obj$BETA0[,c(1:6)]
which(beta != 0)
summary(obj)
obj$lambdalist
obj$BETA0
obj$BETA0[,c(0:3)]
obj$lambdalist
obj$validn
obj$d0
obj$n0
obj$lambdalist
install.packages("highfrequency")
library(highfrequency)
convert()
convert
x =2
samp_var = 1
x = 2
msg = "hi"
clear
pwd
msg
msg
pwd
pwd
msg
setwd("~/")
?exp
exp(1)
exp(2)
exp(-0.03 * 1)
x = 1
x <- 1
1 -> x
x
1 = x
y =
f
#
x = 5
print(x)
x = 5
x
print(x)
x[1]
vector()
numeric()
clear
cls
double()
logical()
True
true
TRUE
FALSE
pwd
?vector
vector(mode = 'logical', length = 4)
vector('numeric', 7)
z = vector("numeric", 7)
z
typeof(z)
z = 3L
typeof(Z)
clear
typeof(z)
Inf
NaN
1 / 0
0 / 0
1 / Inf == 0
1e-9999
1e-10
1e-100
1e-1000
?attributes
attributes(z)
vec1 = c(4, 6, 7, 9)
vec1
vec1[,]
v = 9:29
vec2 = 4:13
vec2
for i in vec2:
for (i in vec2):
typeof(vec2)
typeof(vec1)
m = matrix(nrow = 2, ncol = 3)
m
dim(m)
attributes(m0
)
attributes(m)
dim(m)
dim(m)[1]
dim(m)[2]
m$
dim
$col
m$col
$col
x = list(1, 'a', TRUE, 1 + 4i)
x
x[1]
x[1][1]
x[1][1][1]
x[2]
x[2][1]
x = factor(c('yes', 'yes' 'no', 'yes', 'no'))
x = factor(c('yes', 'yes', 'no', 'yes', 'no'))
x
table(x)
unclass(x)
x
# list: can contain different type of class
# factor: categorical data
# DataFrames
x = data.frame(foo = 1:4, bar = c (T, T, F, F))
x
nrow(x)
ncol(x)
names(x)
dim(x)
view(x)
View(x)
tail(x, 2)
head(x, 1)
clear
str
str(x)
x$foo
x$bar
summary(x)
sepal
InsectSprays
summary(InsectSprays)
#Subsetting
x = c('a', 'b', 'c', 'c', 'd', 'a')
x
x[2]
x[1:4]
x = matrix(1:6, 2, 3)
x
x[1, 2]
x[2, 1]
x
x[2, 2]
x[3, 2]
x[2, 3]
x[2,]
x[,1]
x[,3]
x[,3]
x[2,]
x = list(foo = 1:4, bar = 0.6)
x
x$foo
x$bar
name = 'foo'
x[[name]]
#Vectorized Operation
x = 1:4; y = 6:9
z = x + y
print(z)
y = matrix(rep(10, 4) 2, 2)
y = matrix(rep(10, 4) 2, 2))
y = matrix(rep(10, 4), 2, 2)
y
rep(10, 4)
x = 10
y = matrix(rep(10, 4), 2, 2)
print(x + y)
x = 10
y = matrix(rep(10, 4), 2, 2)
print(x + y)
print(x * y)
x = matrix(1:4, 2, 2)
y = matrix(rep(10, 4), 2, 2)
print(x + y)
print(x * y)
print(a * b)
a = c(2, 3, 4)
b = c(5, 6, 7)
print(a * b)
print(a %*% b)
x
vec1
vec2
vec3 = vec2[length(vec2):1]
vec3
vec2
vec3 = vec2[length(vec2):1]
length(vec2)
ls
âˆ‘
view vec3
View(vec3)
x
y
x / y
warning()
x = c("a", "b")
as.character(x)
as.numeric(x)
x
warning("HI")
warnings
warnings("HI")
warnings("HI")
warnings("a")
warnings
last.warning
return()
traceback
traceback()
setwd("/Users/park-wanbae/Desktop/MFE/2018-1/FIN521/Cases/CS5")
setwd("/Users/park-wanbae/Desktop/MFE/2018-1/FIN521/Case/CS5")
irr = read.csv("irr.csv")
plot(irr$X...Equity,irr$IRR)
plot(irr$X...Equity,irr$IRR, xlab = "Amount of Equity",
ylab = "IRR")
plot(irr$X...Equity,irr$IRR, xlab = "Amount of Equity",
ylab = "IRR", type = 'l')
plot(irr$X...Equity,irr$IRR, xlab = "Amount of Equity",
ylab = "IRR", type = 'l',
main = "IRR with leverage")
plot(irr$X...Equity,irr$IRR, xlab = "Amount of Equity",
ylab = "IRR", type = 'l',
main = "IRR with leverage", cex.lab = 1.5)
plot(irr$X...Equity,irr$IRR, xlab = "Amount of Equity",
ylab = "IRR", type = 'l',
main = "IRR with leverage", cex.lab = 0.5)
plot(irr$X...Equity,irr$IRR, xlab = "Amount of Equity",
ylab = "IRR", type = 'l',
main = "IRR with leverage", cex.main = 0.5)
plot(irr$X...Equity,irr$IRR, xlab = "Amount of Equity",
ylab = "IRR", type = 'l',
main = "IRR with leverage", cex.main = 1)
plot(irr$X...Equity,irr$IRR, xlab = "Amount of Equity",
ylab = "IRR", type = 'l',
main = "IRR with leverage", cex.main = 1, cex.lab = 0.8)
plot(irr$X...Equity,irr$IRR, xlab = "Amount of Equity",
ylab = "IRR", type = 'l',
main = "IRR with leverage", cex.main = 1, cex.lab = 0.8,
cex.axis = 0.8)
